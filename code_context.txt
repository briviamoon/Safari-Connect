// File: Backend/captive/CaptivePortalAPI.py
from fastapi import FastAPI, HTTPException, Depends
from sqlalchemy import create_engine, Column, Integer, String, Float, DateTime, Boolean
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker, Session
from datetime import datetime, timedelta
import africastalking
import requests
import jwt
from typing import Optional

app = FastAPI()
Base = declarative_base()

# Database Models
class User(Base):
    __tablename__ = "users"
    id = Column(Integer, primary_key=True, index=True)
    phone_number = Column(String, unique=True, index=True)
    mac_address = Column(String)
    created_at = Column(DateTime, default=datetime.utcnow)
    is_active = Column(Boolean, default=True)

class Subscription(Base):
    __tablename__ = "subscriptions"
    id = Column(Integer, primary_key=True, index=True)
    user_id = Column(Integer)
    plan_type = Column(String)  # '1hr', '2hrs', '5hrs', 'monthly'
    amount = Column(Float)
    start_time = Column(DateTime)
    end_time = Column(DateTime)
    is_active = Column(Boolean, default=True)

class OTP(Base):
    __tablename__ = "otps"
    id = Column(Integer, primary_key=True, index=True)
    phone_number = Column(String)
    otp_code = Column(String)
    created_at = Column(DateTime, default=datetime.utcnow)
    is_used = Column(Boolean, default=False)

# Database connection
DATABASE_URL = "postgresql://user:password@localhost/captive_portal"
engine = create_engine(DATABASE_URL)
SessionLocal = sessionmaker(autocommit=False, autoload=True, bind=engine)

# Dependencies
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

# Africa's Talking SMS configuration
africastalking.initialize(
    username='YOUR_USERNAME',
    api_key='YOUR_API_KEY'
)
sms = africastalking.SMS

# Routes
@app.post("/register")
async def register_user(phone_number: str, mac_address: str, db: Session = Depends(get_db)):
    user = User(phone_number=phone_number, mac_address=mac_address)
    db.add(user)
    db.commit()
    
    # Generate and send OTP
    otp_code = generate_otp()
    store_otp(db, phone_number, otp_code)
    send_otp_sms(phone_number, otp_code)
    
    return {"message": "Registration initiated"}

@app.post("/verify-otp")
async def verify_otp(phone_number: str, otp_code: str, db: Session = Depends(get_db)):
    otp = db.query(OTP).filter(
        OTP.phone_number == phone_number,
        OTP.otp_code == otp_code,
        OTP.is_used == False
    ).first()
    
    if not otp:
        raise HTTPException(status_code=400, detail="Invalid OTP")
    
    otp.is_used = True
    db.commit()
    
    # Generate JWT token
    token = create_access_token(phone_number)
    return {"token": token}

@app.post("/subscribe")
async def create_subscription(
    user_id: int,
    plan_type: str,
    db: Session = Depends(get_db)
):
    # Plan configurations
    plans = {
        "1hr": {"amount": 10, "duration": timedelta(hours=1)},
        "2hrs": {"amount": 25, "duration": timedelta(hours=2)},
        "5hrs": {"amount": 65, "duration": timedelta(hours=5)},
        "monthly": {"amount": 500, "duration": timedelta(days=30)}
    }
    
    if plan_type not in plans:
        raise HTTPException(status_code=400, detail="Invalid plan type")
    
    plan = plans[plan_type]
    subscription = Subscription(
        user_id=user_id,
        plan_type=plan_type,
        amount=plan["amount"],
        start_time=datetime.utcnow(),
        end_time=datetime.utcnow() + plan["duration"]
    )
    
    db.add(subscription)
    db.commit()
    
    # Initiate M-Pesa payment
    initiate_mpesa_payment(subscription.id, plan["amount"])
    
    return {"message": "Subscription initiated"}

# Helper functions
def generate_otp():
    # Generate 6-digit OTP
    import random
    return str(random.randint(100000, 999999))

def store_otp(db: Session, phone_number: str, otp_code: str):
    otp = OTP(phone_number=phone_number, otp_code=otp_code)
    db.add(otp)
    db.commit()

def send_otp_sms(phone_number: str, otp_code: str):
    message = f"Your OTP code is: {otp_code}"
    try:
        response = sms.send(message, [phone_number])
        return response
    except Exception as e:
        raise HTTPException(status_code=500, detail="Failed to send SMS")

def create_access_token(phone_number: str):
    to_encode = {"sub": phone_number}
    encoded_jwt = jwt.encode(to_encode, "YOUR_SECRET_KEY", algorithm="HS256")
    return encoded_jwt

def initiate_mpesa_payment(subscription_id: int, amount: float):
    # Implement M-Pesa payment integration
    # This is a placeholder for the actual implementation
    pass

# Create database tables
Base.metadata.create_all(bind=engine)


// File: Backend/Payment/FastAPI.py
from fastapi import FastAPI, HTTPException, BackgroundTasks
from pydantic import BaseModel
import requests
import base64
from datetime import datetime
import json

class MPESACredentials:
    CONSUMER_KEY = "your_consumer_key"
    CONSUMER_SECRET = "your_consumer_secret"
    PASSKEY = "your_passkey"
    BUSINESS_SHORT_CODE = "your_shortcode"  # Usually your Paybill number
    CALLBACK_URL = "https://your-domain.com/mpesa/callback"
    
class MPESAPayment:
    def __init__(self):
        self.access_token = None
        self.access_token_expiry = None
        
    def generate_password(self):
        """Generate the M-Pesa password using the provided passkey"""
        timestamp = datetime.now().strftime('%Y%m%d%H%M%S')
        data_to_encode = f"{MPESACredentials.BUSINESS_SHORT_CODE}{MPESACredentials.PASSKEY}{timestamp}"
        return base64.b64encode(data_to_encode.encode()).decode('utf-8'), timestamp
        
    async def get_access_token(self):
        """Get the access token required to make M-Pesa API calls"""
        if self.access_token and datetime.now() < self.access_token_expiry:
            return self.access_token
            
        credentials = base64.b64encode(
            f"{MPESACredentials.CONSUMER_KEY}:{MPESACredentials.CONSUMER_SECRET}".encode()
        ).decode('utf-8')
        
        response = requests.get(
            "https://sandbox.safaricom.co.ke/oauth/v1/generate?grant_type=client_credentials",
            headers={"Authorization": f"Basic {credentials}"}
        )
        
        if response.status_code != 200:
            raise HTTPException(status_code=400, detail="Failed to get access token")
            
        result = response.json()
        self.access_token = result['access_token']
        # Token expires in 1 hour
        self.access_token_expiry = datetime.now() + timedelta(seconds=3599)
        return self.access_token
        
    async def initiate_stk_push(self, phone_number: str, amount: float, reference: str):
        """Initiate STK push to customer's phone"""
        access_token = await self.get_access_token()
        password, timestamp = self.generate_password()
        
        headers = {
            "Authorization": f"Bearer {access_token}",
            "Content-Type": "application/json",
        }
        
        payload = {
            "BusinessShortCode": MPESACredentials.BUSINESS_SHORT_CODE,
            "Password": password,
            "Timestamp": timestamp,
            "TransactionType": "CustomerPayBillOnline",
            "Amount": int(amount),
            "PartyA": phone_number,
            "PartyB": MPESACredentials.BUSINESS_SHORT_CODE,
            "PhoneNumber": phone_number,
            "CallBackURL": MPESACredentials.CALLBACK_URL,
            "AccountReference": reference,
            "TransactionDesc": f"WiFi Subscription {reference}"
        }
        
        response = requests.post(
            "https://sandbox.safaricom.co.ke/mpesa/stkpush/v1/processrequest",
            json=payload,
            headers=headers
        )
        
        if response.status_code != 200:
            raise HTTPException(status_code=400, detail="Failed to initiate payment")
            
        return response.json()

# FastAPI routes for M-Pesa integration
@app.post("/mpesa/initiate")
async def initiate_payment(
    phone_number: str,
    amount: float,
    subscription_id: int,
    background_tasks: BackgroundTasks
):
    mpesa = MPESAPayment()
    result = await mpesa.initiate_stk_push(
        phone_number=phone_number,
        amount=amount,
        reference=str(subscription_id)
    )
    
    # Store the checkout request ID for verification
    background_tasks.add_task(
        store_checkout_request,
        checkout_id=result['CheckoutRequestID'],
        subscription_id=subscription_id
    )
    
    return {"message": "Payment initiated", "checkout_id": result['CheckoutRequestID']}

@app.post("/mpesa/callback")
async def mpesa_callback(payment_data: dict):
    """Handle M-Pesa callback"""
    try:
        # Extract payment details from callback
        result = payment_data['Body']['stkCallback']
        checkout_id = result['CheckoutRequestID']
        
        if result['ResultCode'] == 0:
            # Payment successful
            # Update subscription status
            await activate_subscription(checkout_id)
            return {"message": "Payment processed successfully"}
        else:
            # Payment failed
            await mark_payment_failed(checkout_id)
            return {"message": "Payment failed"}
            
    except Exception as e:
        raise HTTPException(status_code=400, detail="Invalid callback data")

async def store_checkout_request(checkout_id: str, subscription_id: int):
    """Store checkout request details in database"""
    # Implement database storage logic here
    pass

async def activate_subscription(checkout_id: str):
    """Activate subscription after successful payment"""
    # Implement subscription activation logic here
    pass

async def mark_payment_failed(checkout_id: str):
    """Mark payment as failed in database"""
    # Implement failure handling logic here
    pass


// File: index.html
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Safari Connect</title>
    <link rel="stylesheet" href="style.css">
    <link rel="shortcut icon" href="./resources/polotno.svg" type="image/x-icon">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/axios/1.6.2/axios.min.js"></script>
</head>

<body>
    <div class="container">
        <div class="card">
            <p style="font-size: medium; font-weight: 300;font-style:italic; font-family: Arial, Helvetica, sans-serif;">Explore A Universe Of Possibilities</p>
            <div class="icon-container">
                <img class="safari-icon" src="resources/safari-icon2.svg" alt="safari connect">
            </div>
            <h1>Safari Connect</h1>

            <!-- Registration Form -->
            <div id="registerForm">
                <div class="form-group">
                    <label for="phone">Phone Number</label>
                    <input type="tel" id="phone" style="text-align: center;" placeholder="Enter your phone number" required>
                </div>
                <button onclick="register()">Register</button>
            </div>

            <!-- OTP Verification Form -->
            <div id="otpForm" class="hidden">
                <div class="form-group">
                    <label for="otp">Enter OTP</label>
                    <input type="text" id="otp" placeholder="Enter OTP code" required>
                </div>
                <button onclick="verifyOTP()">Verify OTP</button>
            </div>

            <!-- Subscription Plans -->
            <div id="plansForm" class="hidden">
                <h2>Choose a Plan</h2>
                <div class="plans">
                    <div class="plan-card" onclick="selectPlan('1hr')">
                        <h3>1 Hour</h3>
                        <p>KSh 10</p>
                    </div>
                    <div class="plan-card" onclick="selectPlan('2hrs')">
                        <h3>2 Hours</h3>
                        <p>KSh 20</p>
                    </div>
                    <div class="plan-card" onclick="selectPlan('3hrs')">
                        <h3>3 Hours</h3>
                        <p>KSh 30</p>
                    </div>
                    <div class="plan-card" onclick="selectPlan('8hrs')">
                        <h3>8 Hours</h3>
                        <p>KSh 80</p>
                    </div>
                    <div class="plan-card" onclick="selectPlan('12hrs')">
                        <h3>12 Hours</h3>
                        <p>KSh 100</p>
                    </div>
                    <div class="plan-card" onclick="selectPlan('24hrs')">
                        <h3>24 Hours</h3>
                        <p>KSh 150</p>
                    </div>
                    <div class="plan-card" onclick="selectPlan('72hrs')">
                        <h3> 3 Days</h3>
                        <p>KSh 250</p>
                    </div>
                    <div class="plan-card" onclick="selectPlan('168hrs')">
                        <h3>1 Week</h3>
                        <p>KSh 350</p>
                    </div>
                    <div class="plan-card" onclick="selectPlan('336hrs')">
                        <h3>2 Weeks</h3>
                        <p>KSh 1050</p>
                    </div>
                    <div class="plan-card" onclick="selectPlan('monthly')">
                        <h3>Monthly</h3>
                        <p>KSh 2000</p>
                    </div>
                </div>
                <button onclick="subscribe()" class="hidden" id="subscribeBtn">Subscribe</button>
            </div>
        </div>
    </div>
    <script src="index.js"></script>
</body>

</html>


// File: index.js
const API_BASE_URL = 'http://your-api-url';
let selectedPlan = null;
let currentUser = null;

async function register() {
    const phone = document.getElementById('phone').value;
    try {
        const response = await axios.post(`${API_BASE_URL}/register`, {
            phone_number: phone,
            mac_address: await getMacAddress()
        });
        document.getElementById('registerForm').classList.add('hidden');
        document.getElementById('otpForm').classList.remove('hidden');
    } catch (error) {
        showError('Registration failed. Please try again.');
    }
}

async function verifyOTP() {
    const otp = document.getElementById('otp').value;
    const phone = document.getElementById('phone').value;
    try {
        const response = await axios.post(`${API_BASE_URL}/verify-otp`, {
            phone_number: phone,
            otp_code: otp
        });
        document.getElementById('otpForm').classList.add('hidden');
        document.getElementById('plansForm').classList.remove('hidden');
        currentUser = response.data.token;
    } catch (error) {
        showError('Invalid OTP. Please try again.');
    }
}

function selectPlan(plan) {
    selectedPlan = plan;
    document.querySelectorAll('.plan-card').forEach(card => {
        card.classList.remove('selected');
    });
    event.currentTarget.classList.add('selected');
    document.getElementById('subscribeBtn').classList.remove('hidden');
}

async function subscribe() {
    if (!selectedPlan || !currentUser) return;
    try {
        const response = await axios.post(`${API_BASE_URL}/subscribe`, {
            plan_type: selectedPlan
        }, {
            headers: { Authorization: `Bearer ${currentUser}` }
        });
        // Handle M-Pesa payment initiation
        showSuccess('Subscription initiated. Please complete payment on your phone.');
    } catch (error) {
        showError('Subscription failed. Please try again.');
    }
}

async function getMacAddress() {
    // This is a placeholder. In reality, you'd need to implement this
    // based on your network setup
    return "00:00:00:00:00:00";
}

function showError(message) {
    const error = document.createElement('div');
    error.className = 'error';
    error.textContent = message;
    document.querySelector('.card').appendChild(error);
    setTimeout(() => error.remove(), 3000);
}

function showSuccess(message) {
    const success = document.createElement('div');
    success.className = 'success';
    success.textContent = message;
    document.querySelector('.card').appendChild(success);
    setTimeout(() => success.remove(), 3000);
}


// File: OpenTWRP/dhcp
# /etc/config/dhcp
config dnsmasq
    option domainneeded '1'
    option boguspriv '1'
    option filterwin2k '0'
    option localise_queries '1'
    option rebind_protection '1'
    option rebind_localhost '1'
    option local '/lan/'
    option domain 'lan'
    option expandhosts '1'
    option nonegcache '0'
    option authoritative '1'
    option readethers '1'
    option leasefile '/tmp/dhcp.leases'
    option resolvfile '/tmp/resolv.conf.auto'

config dhcp 'lan'
    option interface 'lan'
    option start '100'
    option limit '150'
    option leasetime '12h'


// File: OpenTWRP/firewll
# Firewall rules (/etc/config/firewall)
# Allow access to captive portal
config rule
    option name 'Allow-Captive-Portal'
    option src 'lan'
    option dest_port '80'
    option proto 'tcp'
    option target 'ACCEPT'

# Block all other traffic for unauthenticated users
config rule
    option name 'Block-Unauthenticated'
    option src 'lan'
    option proto 'all'
    option target 'DROP'


// File: OpenTWRP/network
# /etc/config/network
config interface 'loopback' # type: ignore
    option device 'lo' # type: ignore
    option proto 'static' # type: ignore
    option ipaddr '127.0.0.1' # type: ignore
    option netmask '255.0.0.0' # type: ignore

config interface 'lan' # type: ignore
    option device 'eth0' # type: ignore
    option proto 'static' # type: ignore
    option ipaddr '192.168.1.1' # type: ignore
    option netmask '255.255.255.0' # type: ignore


// File: OpenTWRP/nodogsplash
# /etc/config/nodogsplash
config nodogsplash
    option enabled '1'
    option gatewayname 'WiFi Hotspot'
    option gatewayinterface 'br-lan'
    option maxclients '250'
    option clientidletimeout '1440'
    option webroot '/etc/nodogsplash/htdocs'
    option redirecturl 'http://your-portal-url'
    
# Authentication script
option authenticateimmediately '0'
option passwordattempts '5'
option gatewayiprange '192.168.1.0/24'


// File: style.css
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
}

body {
    background: #f0f2f5;
    color: #1a1a1a;
    line-height: 1.6;
}

.container {
    max-width: 400px;
    margin: 2rem auto;
    padding: 1rem;
}

.card {
    background: white;
    border-radius: 8px;
    padding: 2rem;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    text-align: center;
}

h1 {
    text-align: center;
    color: #1a73e8;
    margin-bottom: 1.5rem;
}

.form-group {
    margin-bottom: 1rem;
}

label {
    display: block;
    margin-bottom: 0.5rem;
    color: #666;
}

input {
    width: 100%;
    padding: 0.75rem;
    border: 1px solid #ddd;
    border-radius: 4px;
    font-size: 1rem;
}

button {
    width: 100%;
    padding: 0.75rem;
    background: #1a73e8;
    color: white;
    border: none;
    border-radius: 4px;
    font-size: 1rem;
    cursor: pointer;
    transition: background 0.3s;
}

button:hover {
    background: #1557b0;
}

.plans {
    display: grid;
    gap: 1rem;
    margin-top: 1rem;
}

.plan-card {
    border: 1px solid #ddd;
    border-radius: 4px;
    padding: 1rem;
    cursor: pointer;
    transition: all 0.3s;
}

.plan-card:hover {
    border-color: #1a73e8;
    transform: translateY(-2px);
}

.plan-card.selected {
    border-color: #1a73e8;
    background: #f8f9fe;
}

.error {
    color: #d93025;
    margin-top: 0.5rem;
    font-size: 0.875rem;
}

.success {
    color: #188038;
    margin-top: 0.5rem;
    font-size: 0.875rem;
}

.hidden {
    display: none;
}

.icon-container {
    display: flex;
    justify-content: center;
    align-items: center;
    height: fit-content;
}

.safari-icon {
    height: 200px;
}


